/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientService_H
#define ClientService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "client_service_types.h"

namespace celestial {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ClientServiceIf {
 public:
  virtual ~ClientServiceIf() {}
  virtual void query(QueryResponse& _return, const QueryRequest& request) = 0;
  virtual void getTaskCount(GetTaskCountResponse& _return, const GetTaskCountRequest& request) = 0;
  virtual void queryAndOwn(QueryAndOwnResponse& _return, const QueryAndOwnRequest& request) = 0;
  virtual void update(UpdateResponse& _return, const UpdateRequest& request) = 0;
};

class ClientServiceIfFactory {
 public:
  typedef ClientServiceIf Handler;

  virtual ~ClientServiceIfFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientServiceIf* /* handler */) = 0;
};

class ClientServiceIfSingletonFactory : virtual public ClientServiceIfFactory {
 public:
  ClientServiceIfSingletonFactory(const boost::shared_ptr<ClientServiceIf>& iface) : iface_(iface) {}
  virtual ~ClientServiceIfSingletonFactory() {}

  virtual ClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
};

class ClientServiceNull : virtual public ClientServiceIf {
 public:
  virtual ~ClientServiceNull() {}
  void query(QueryResponse& /* _return */, const QueryRequest& /* request */) {
    return;
  }
  void getTaskCount(GetTaskCountResponse& /* _return */, const GetTaskCountRequest& /* request */) {
    return;
  }
  void queryAndOwn(QueryAndOwnResponse& /* _return */, const QueryAndOwnRequest& /* request */) {
    return;
  }
  void update(UpdateResponse& /* _return */, const UpdateRequest& /* request */) {
    return;
  }
};

typedef struct _ClientService_query_args__isset {
  _ClientService_query_args__isset() : request(false) {}
  bool request :1;
} _ClientService_query_args__isset;

class ClientService_query_args {
 public:

  ClientService_query_args(const ClientService_query_args&);
  ClientService_query_args& operator=(const ClientService_query_args&);
  ClientService_query_args() {
  }

  virtual ~ClientService_query_args() throw();
  QueryRequest request;

  _ClientService_query_args__isset __isset;

  void __set_request(const QueryRequest& val);

  bool operator == (const ClientService_query_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientService_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_query_pargs {
 public:


  virtual ~ClientService_query_pargs() throw();
  const QueryRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_query_result__isset {
  _ClientService_query_result__isset() : success(false) {}
  bool success :1;
} _ClientService_query_result__isset;

class ClientService_query_result {
 public:

  ClientService_query_result(const ClientService_query_result&);
  ClientService_query_result& operator=(const ClientService_query_result&);
  ClientService_query_result() {
  }

  virtual ~ClientService_query_result() throw();
  QueryResponse success;

  _ClientService_query_result__isset __isset;

  void __set_success(const QueryResponse& val);

  bool operator == (const ClientService_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_query_presult__isset {
  _ClientService_query_presult__isset() : success(false) {}
  bool success :1;
} _ClientService_query_presult__isset;

class ClientService_query_presult {
 public:


  virtual ~ClientService_query_presult() throw();
  QueryResponse* success;

  _ClientService_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_getTaskCount_args__isset {
  _ClientService_getTaskCount_args__isset() : request(false) {}
  bool request :1;
} _ClientService_getTaskCount_args__isset;

class ClientService_getTaskCount_args {
 public:

  ClientService_getTaskCount_args(const ClientService_getTaskCount_args&);
  ClientService_getTaskCount_args& operator=(const ClientService_getTaskCount_args&);
  ClientService_getTaskCount_args() {
  }

  virtual ~ClientService_getTaskCount_args() throw();
  GetTaskCountRequest request;

  _ClientService_getTaskCount_args__isset __isset;

  void __set_request(const GetTaskCountRequest& val);

  bool operator == (const ClientService_getTaskCount_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientService_getTaskCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getTaskCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_getTaskCount_pargs {
 public:


  virtual ~ClientService_getTaskCount_pargs() throw();
  const GetTaskCountRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getTaskCount_result__isset {
  _ClientService_getTaskCount_result__isset() : success(false) {}
  bool success :1;
} _ClientService_getTaskCount_result__isset;

class ClientService_getTaskCount_result {
 public:

  ClientService_getTaskCount_result(const ClientService_getTaskCount_result&);
  ClientService_getTaskCount_result& operator=(const ClientService_getTaskCount_result&);
  ClientService_getTaskCount_result() {
  }

  virtual ~ClientService_getTaskCount_result() throw();
  GetTaskCountResponse success;

  _ClientService_getTaskCount_result__isset __isset;

  void __set_success(const GetTaskCountResponse& val);

  bool operator == (const ClientService_getTaskCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_getTaskCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_getTaskCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_getTaskCount_presult__isset {
  _ClientService_getTaskCount_presult__isset() : success(false) {}
  bool success :1;
} _ClientService_getTaskCount_presult__isset;

class ClientService_getTaskCount_presult {
 public:


  virtual ~ClientService_getTaskCount_presult() throw();
  GetTaskCountResponse* success;

  _ClientService_getTaskCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_queryAndOwn_args__isset {
  _ClientService_queryAndOwn_args__isset() : request(false) {}
  bool request :1;
} _ClientService_queryAndOwn_args__isset;

class ClientService_queryAndOwn_args {
 public:

  ClientService_queryAndOwn_args(const ClientService_queryAndOwn_args&);
  ClientService_queryAndOwn_args& operator=(const ClientService_queryAndOwn_args&);
  ClientService_queryAndOwn_args() {
  }

  virtual ~ClientService_queryAndOwn_args() throw();
  QueryAndOwnRequest request;

  _ClientService_queryAndOwn_args__isset __isset;

  void __set_request(const QueryAndOwnRequest& val);

  bool operator == (const ClientService_queryAndOwn_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientService_queryAndOwn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_queryAndOwn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_queryAndOwn_pargs {
 public:


  virtual ~ClientService_queryAndOwn_pargs() throw();
  const QueryAndOwnRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_queryAndOwn_result__isset {
  _ClientService_queryAndOwn_result__isset() : success(false) {}
  bool success :1;
} _ClientService_queryAndOwn_result__isset;

class ClientService_queryAndOwn_result {
 public:

  ClientService_queryAndOwn_result(const ClientService_queryAndOwn_result&);
  ClientService_queryAndOwn_result& operator=(const ClientService_queryAndOwn_result&);
  ClientService_queryAndOwn_result() {
  }

  virtual ~ClientService_queryAndOwn_result() throw();
  QueryAndOwnResponse success;

  _ClientService_queryAndOwn_result__isset __isset;

  void __set_success(const QueryAndOwnResponse& val);

  bool operator == (const ClientService_queryAndOwn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_queryAndOwn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_queryAndOwn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_queryAndOwn_presult__isset {
  _ClientService_queryAndOwn_presult__isset() : success(false) {}
  bool success :1;
} _ClientService_queryAndOwn_presult__isset;

class ClientService_queryAndOwn_presult {
 public:


  virtual ~ClientService_queryAndOwn_presult() throw();
  QueryAndOwnResponse* success;

  _ClientService_queryAndOwn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientService_update_args__isset {
  _ClientService_update_args__isset() : request(false) {}
  bool request :1;
} _ClientService_update_args__isset;

class ClientService_update_args {
 public:

  ClientService_update_args(const ClientService_update_args&);
  ClientService_update_args& operator=(const ClientService_update_args&);
  ClientService_update_args() {
  }

  virtual ~ClientService_update_args() throw();
  UpdateRequest request;

  _ClientService_update_args__isset __isset;

  void __set_request(const UpdateRequest& val);

  bool operator == (const ClientService_update_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientService_update_pargs {
 public:


  virtual ~ClientService_update_pargs() throw();
  const UpdateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_update_result__isset {
  _ClientService_update_result__isset() : success(false) {}
  bool success :1;
} _ClientService_update_result__isset;

class ClientService_update_result {
 public:

  ClientService_update_result(const ClientService_update_result&);
  ClientService_update_result& operator=(const ClientService_update_result&);
  ClientService_update_result() {
  }

  virtual ~ClientService_update_result() throw();
  UpdateResponse success;

  _ClientService_update_result__isset __isset;

  void __set_success(const UpdateResponse& val);

  bool operator == (const ClientService_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientService_update_presult__isset {
  _ClientService_update_presult__isset() : success(false) {}
  bool success :1;
} _ClientService_update_presult__isset;

class ClientService_update_presult {
 public:


  virtual ~ClientService_update_presult() throw();
  UpdateResponse* success;

  _ClientService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientServiceClient : virtual public ClientServiceIf {
 public:
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(QueryResponse& _return, const QueryRequest& request);
  void send_query(const QueryRequest& request);
  void recv_query(QueryResponse& _return);
  void getTaskCount(GetTaskCountResponse& _return, const GetTaskCountRequest& request);
  void send_getTaskCount(const GetTaskCountRequest& request);
  void recv_getTaskCount(GetTaskCountResponse& _return);
  void queryAndOwn(QueryAndOwnResponse& _return, const QueryAndOwnRequest& request);
  void send_queryAndOwn(const QueryAndOwnRequest& request);
  void recv_queryAndOwn(QueryAndOwnResponse& _return);
  void update(UpdateResponse& _return, const UpdateRequest& request);
  void send_update(const UpdateRequest& request);
  void recv_update(UpdateResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTaskCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryAndOwn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientServiceProcessor(boost::shared_ptr<ClientServiceIf> iface) :
    iface_(iface) {
    processMap_["query"] = &ClientServiceProcessor::process_query;
    processMap_["getTaskCount"] = &ClientServiceProcessor::process_getTaskCount;
    processMap_["queryAndOwn"] = &ClientServiceProcessor::process_queryAndOwn;
    processMap_["update"] = &ClientServiceProcessor::process_update;
  }

  virtual ~ClientServiceProcessor() {}
};

class ClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientServiceProcessorFactory(const ::boost::shared_ptr< ClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientServiceIfFactory > handlerFactory_;
};

class ClientServiceMultiface : virtual public ClientServiceIf {
 public:
  ClientServiceMultiface(std::vector<boost::shared_ptr<ClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientServiceIf> > ifaces_;
  ClientServiceMultiface() {}
  void add(boost::shared_ptr<ClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void query(QueryResponse& _return, const QueryRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, request);
    }
    ifaces_[i]->query(_return, request);
    return;
  }

  void getTaskCount(GetTaskCountResponse& _return, const GetTaskCountRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTaskCount(_return, request);
    }
    ifaces_[i]->getTaskCount(_return, request);
    return;
  }

  void queryAndOwn(QueryAndOwnResponse& _return, const QueryAndOwnRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryAndOwn(_return, request);
    }
    ifaces_[i]->queryAndOwn(_return, request);
    return;
  }

  void update(UpdateResponse& _return, const UpdateRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(_return, request);
    }
    ifaces_[i]->update(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ClientServiceConcurrentClient : virtual public ClientServiceIf {
 public:
  ClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(QueryResponse& _return, const QueryRequest& request);
  int32_t send_query(const QueryRequest& request);
  void recv_query(QueryResponse& _return, const int32_t seqid);
  void getTaskCount(GetTaskCountResponse& _return, const GetTaskCountRequest& request);
  int32_t send_getTaskCount(const GetTaskCountRequest& request);
  void recv_getTaskCount(GetTaskCountResponse& _return, const int32_t seqid);
  void queryAndOwn(QueryAndOwnResponse& _return, const QueryAndOwnRequest& request);
  int32_t send_queryAndOwn(const QueryAndOwnRequest& request);
  void recv_queryAndOwn(QueryAndOwnResponse& _return, const int32_t seqid);
  void update(UpdateResponse& _return, const UpdateRequest& request);
  int32_t send_update(const UpdateRequest& request);
  void recv_update(UpdateResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
