/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "client_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace celestial {

int _kOwnershipModeValues[] = {
  OwnershipMode::IncludeOwned,
  OwnershipMode::ExcludeOwned
};
const char* _kOwnershipModeNames[] = {
  "IncludeOwned",
  "ExcludeOwned"
};
const std::map<int, const char*> _OwnershipMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOwnershipModeValues, _kOwnershipModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPickUpPolicyValues[] = {
  PickUpPolicy::RANDOM,
  PickUpPolicy::OLDEST
};
const char* _kPickUpPolicyNames[] = {
  "RANDOM",
  "OLDEST"
};
const std::map<int, const char*> _PickUpPolicy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPickUpPolicyValues, _kPickUpPolicyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


TaskInfo::~TaskInfo() throw() {
}


void TaskInfo::__set_task_id(const int64_t val) {
  this->task_id = val;
__isset.task_id = true;
}

void TaskInfo::__set_group(const std::string& val) {
  this->group = val;
}

void TaskInfo::__set_creation_time(const int64_t val) {
  this->creation_time = val;
}

void TaskInfo::__set_owner(const std::string& val) {
  this->owner = val;
}

void TaskInfo::__set_eta(const int64_t val) {
  this->eta = val;
}

void TaskInfo::__set_value(const std::string& val) {
  this->value = val;
}

uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->task_id);
          this->__isset.task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->creation_time);
          this->__isset.creation_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eta);
          this->__isset.eta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TaskInfo");

  if (this->__isset.task_id) {
    xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->task_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creation_time", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->creation_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eta", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->eta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskInfo &a, TaskInfo &b) {
  using ::std::swap;
  swap(a.task_id, b.task_id);
  swap(a.group, b.group);
  swap(a.creation_time, b.creation_time);
  swap(a.owner, b.owner);
  swap(a.eta, b.eta);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TaskInfo::TaskInfo(const TaskInfo& other0) {
  task_id = other0.task_id;
  group = other0.group;
  creation_time = other0.creation_time;
  owner = other0.owner;
  eta = other0.eta;
  value = other0.value;
  __isset = other0.__isset;
}
TaskInfo& TaskInfo::operator=(const TaskInfo& other1) {
  task_id = other1.task_id;
  group = other1.group;
  creation_time = other1.creation_time;
  owner = other1.owner;
  eta = other1.eta;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void TaskInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TaskInfo(";
  out << "task_id="; (__isset.task_id ? (out << to_string(task_id)) : (out << "<null>"));
  out << ", " << "group=" << to_string(group);
  out << ", " << "creation_time=" << to_string(creation_time);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "eta=" << to_string(eta);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


QueryRequest::~QueryRequest() throw() {
}


void QueryRequest::__set_group(const std::string& val) {
  this->group = val;
}

void QueryRequest::__set_limit(const int32_t val) {
  this->limit = val;
}

void QueryRequest::__set_own_mode(const OwnershipMode::type val) {
  this->own_mode = val;
}

uint32_t QueryRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->own_mode = (OwnershipMode::type)ecast2;
          this->__isset.own_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryRequest");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("own_mode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->own_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryRequest &a, QueryRequest &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.limit, b.limit);
  swap(a.own_mode, b.own_mode);
  swap(a.__isset, b.__isset);
}

QueryRequest::QueryRequest(const QueryRequest& other3) {
  group = other3.group;
  limit = other3.limit;
  own_mode = other3.own_mode;
  __isset = other3.__isset;
}
QueryRequest& QueryRequest::operator=(const QueryRequest& other4) {
  group = other4.group;
  limit = other4.limit;
  own_mode = other4.own_mode;
  __isset = other4.__isset;
  return *this;
}
void QueryRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryRequest(";
  out << "group=" << to_string(group);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "own_mode=" << to_string(own_mode);
  out << ")";
}


QueryResponse::~QueryResponse() throw() {
}


void QueryResponse::__set_ret_status(const bool val) {
  this->ret_status = val;
}

void QueryResponse::__set_tasks(const std::vector<TaskInfo> & val) {
  this->tasks = val;
}

uint32_t QueryResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ret_status);
          this->__isset.ret_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->tasks.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->tasks[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryResponse");

  xfer += oprot->writeFieldBegin("ret_status", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ret_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<TaskInfo> ::const_iterator _iter10;
    for (_iter10 = this->tasks.begin(); _iter10 != this->tasks.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryResponse &a, QueryResponse &b) {
  using ::std::swap;
  swap(a.ret_status, b.ret_status);
  swap(a.tasks, b.tasks);
  swap(a.__isset, b.__isset);
}

QueryResponse::QueryResponse(const QueryResponse& other11) {
  ret_status = other11.ret_status;
  tasks = other11.tasks;
  __isset = other11.__isset;
}
QueryResponse& QueryResponse::operator=(const QueryResponse& other12) {
  ret_status = other12.ret_status;
  tasks = other12.tasks;
  __isset = other12.__isset;
  return *this;
}
void QueryResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryResponse(";
  out << "ret_status=" << to_string(ret_status);
  out << ", " << "tasks=" << to_string(tasks);
  out << ")";
}


GetTaskCountRequest::~GetTaskCountRequest() throw() {
}


void GetTaskCountRequest::__set_group(const std::string& val) {
  this->group = val;
}

void GetTaskCountRequest::__set_limit(const int32_t val) {
  this->limit = val;
}

void GetTaskCountRequest::__set_own_mode(const OwnershipMode::type val) {
  this->own_mode = val;
}

uint32_t GetTaskCountRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->own_mode = (OwnershipMode::type)ecast13;
          this->__isset.own_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTaskCountRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTaskCountRequest");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("own_mode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->own_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTaskCountRequest &a, GetTaskCountRequest &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.limit, b.limit);
  swap(a.own_mode, b.own_mode);
  swap(a.__isset, b.__isset);
}

GetTaskCountRequest::GetTaskCountRequest(const GetTaskCountRequest& other14) {
  group = other14.group;
  limit = other14.limit;
  own_mode = other14.own_mode;
  __isset = other14.__isset;
}
GetTaskCountRequest& GetTaskCountRequest::operator=(const GetTaskCountRequest& other15) {
  group = other15.group;
  limit = other15.limit;
  own_mode = other15.own_mode;
  __isset = other15.__isset;
  return *this;
}
void GetTaskCountRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTaskCountRequest(";
  out << "group=" << to_string(group);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "own_mode=" << to_string(own_mode);
  out << ")";
}


GetTaskCountResponse::~GetTaskCountResponse() throw() {
}


void GetTaskCountResponse::__set_ret_status(const bool val) {
  this->ret_status = val;
}

void GetTaskCountResponse::__set_count(const int32_t val) {
  this->count = val;
}

uint32_t GetTaskCountResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ret_status);
          this->__isset.ret_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTaskCountResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTaskCountResponse");

  xfer += oprot->writeFieldBegin("ret_status", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ret_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTaskCountResponse &a, GetTaskCountResponse &b) {
  using ::std::swap;
  swap(a.ret_status, b.ret_status);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

GetTaskCountResponse::GetTaskCountResponse(const GetTaskCountResponse& other16) {
  ret_status = other16.ret_status;
  count = other16.count;
  __isset = other16.__isset;
}
GetTaskCountResponse& GetTaskCountResponse::operator=(const GetTaskCountResponse& other17) {
  ret_status = other17.ret_status;
  count = other17.count;
  __isset = other17.__isset;
  return *this;
}
void GetTaskCountResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTaskCountResponse(";
  out << "ret_status=" << to_string(ret_status);
  out << ", " << "count=" << to_string(count);
  out << ")";
}


QueryAndOwnRequest::~QueryAndOwnRequest() throw() {
}


void QueryAndOwnRequest::__set_group(const std::string& val) {
  this->group = val;
}

void QueryAndOwnRequest::__set_limit(const int32_t val) {
  this->limit = val;
}

void QueryAndOwnRequest::__set_policy(const PickUpPolicy::type val) {
  this->policy = val;
}

void QueryAndOwnRequest::__set_lease_period_seconds(const int32_t val) {
  this->lease_period_seconds = val;
}

void QueryAndOwnRequest::__set_worker_name(const std::string& val) {
  this->worker_name = val;
}

uint32_t QueryAndOwnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->policy = (PickUpPolicy::type)ecast18;
          this->__isset.policy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lease_period_seconds);
          this->__isset.lease_period_seconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->worker_name);
          this->__isset.worker_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryAndOwnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryAndOwnRequest");

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policy", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->policy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lease_period_seconds", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->lease_period_seconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("worker_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->worker_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryAndOwnRequest &a, QueryAndOwnRequest &b) {
  using ::std::swap;
  swap(a.group, b.group);
  swap(a.limit, b.limit);
  swap(a.policy, b.policy);
  swap(a.lease_period_seconds, b.lease_period_seconds);
  swap(a.worker_name, b.worker_name);
  swap(a.__isset, b.__isset);
}

QueryAndOwnRequest::QueryAndOwnRequest(const QueryAndOwnRequest& other19) {
  group = other19.group;
  limit = other19.limit;
  policy = other19.policy;
  lease_period_seconds = other19.lease_period_seconds;
  worker_name = other19.worker_name;
  __isset = other19.__isset;
}
QueryAndOwnRequest& QueryAndOwnRequest::operator=(const QueryAndOwnRequest& other20) {
  group = other20.group;
  limit = other20.limit;
  policy = other20.policy;
  lease_period_seconds = other20.lease_period_seconds;
  worker_name = other20.worker_name;
  __isset = other20.__isset;
  return *this;
}
void QueryAndOwnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryAndOwnRequest(";
  out << "group=" << to_string(group);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "policy=" << to_string(policy);
  out << ", " << "lease_period_seconds=" << to_string(lease_period_seconds);
  out << ", " << "worker_name=" << to_string(worker_name);
  out << ")";
}


QueryAndOwnResponse::~QueryAndOwnResponse() throw() {
}


void QueryAndOwnResponse::__set_ret_status(const bool val) {
  this->ret_status = val;
}

void QueryAndOwnResponse::__set_tasks(const std::vector<TaskInfo> & val) {
  this->tasks = val;
}

uint32_t QueryAndOwnResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ret_status);
          this->__isset.ret_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readListBegin(_etype24, _size21);
            this->tasks.resize(_size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              xfer += this->tasks[_i25].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryAndOwnResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryAndOwnResponse");

  xfer += oprot->writeFieldBegin("ret_status", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ret_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<TaskInfo> ::const_iterator _iter26;
    for (_iter26 = this->tasks.begin(); _iter26 != this->tasks.end(); ++_iter26)
    {
      xfer += (*_iter26).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryAndOwnResponse &a, QueryAndOwnResponse &b) {
  using ::std::swap;
  swap(a.ret_status, b.ret_status);
  swap(a.tasks, b.tasks);
  swap(a.__isset, b.__isset);
}

QueryAndOwnResponse::QueryAndOwnResponse(const QueryAndOwnResponse& other27) {
  ret_status = other27.ret_status;
  tasks = other27.tasks;
  __isset = other27.__isset;
}
QueryAndOwnResponse& QueryAndOwnResponse::operator=(const QueryAndOwnResponse& other28) {
  ret_status = other28.ret_status;
  tasks = other28.tasks;
  __isset = other28.__isset;
  return *this;
}
void QueryAndOwnResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryAndOwnResponse(";
  out << "ret_status=" << to_string(ret_status);
  out << ", " << "tasks=" << to_string(tasks);
  out << ")";
}


UpdateRequest::~UpdateRequest() throw() {
}


void UpdateRequest::__set_deletions(const std::vector<TaskInfo> & val) {
  this->deletions = val;
}

void UpdateRequest::__set_inserts(const std::vector<TaskInfo> & val) {
  this->inserts = val;
}

void UpdateRequest::__set_worker_name(const std::string& val) {
  this->worker_name = val;
}

uint32_t UpdateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->deletions.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->deletions.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += this->deletions[_i33].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.deletions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->inserts.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->inserts.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->inserts[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.inserts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->worker_name);
          this->__isset.worker_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateRequest");

  xfer += oprot->writeFieldBegin("deletions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deletions.size()));
    std::vector<TaskInfo> ::const_iterator _iter39;
    for (_iter39 = this->deletions.begin(); _iter39 != this->deletions.end(); ++_iter39)
    {
      xfer += (*_iter39).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inserts", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->inserts.size()));
    std::vector<TaskInfo> ::const_iterator _iter40;
    for (_iter40 = this->inserts.begin(); _iter40 != this->inserts.end(); ++_iter40)
    {
      xfer += (*_iter40).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("worker_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->worker_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateRequest &a, UpdateRequest &b) {
  using ::std::swap;
  swap(a.deletions, b.deletions);
  swap(a.inserts, b.inserts);
  swap(a.worker_name, b.worker_name);
  swap(a.__isset, b.__isset);
}

UpdateRequest::UpdateRequest(const UpdateRequest& other41) {
  deletions = other41.deletions;
  inserts = other41.inserts;
  worker_name = other41.worker_name;
  __isset = other41.__isset;
}
UpdateRequest& UpdateRequest::operator=(const UpdateRequest& other42) {
  deletions = other42.deletions;
  inserts = other42.inserts;
  worker_name = other42.worker_name;
  __isset = other42.__isset;
  return *this;
}
void UpdateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateRequest(";
  out << "deletions=" << to_string(deletions);
  out << ", " << "inserts=" << to_string(inserts);
  out << ", " << "worker_name=" << to_string(worker_name);
  out << ")";
}


UpdateResponse::~UpdateResponse() throw() {
}


void UpdateResponse::__set_ret_status(const bool val) {
  this->ret_status = val;
}

void UpdateResponse::__set_tasks(const std::vector<TaskInfo> & val) {
  this->tasks = val;
}

uint32_t UpdateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ret_status);
          this->__isset.ret_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->tasks.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += this->tasks[_i47].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateResponse");

  xfer += oprot->writeFieldBegin("ret_status", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ret_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<TaskInfo> ::const_iterator _iter48;
    for (_iter48 = this->tasks.begin(); _iter48 != this->tasks.end(); ++_iter48)
    {
      xfer += (*_iter48).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateResponse &a, UpdateResponse &b) {
  using ::std::swap;
  swap(a.ret_status, b.ret_status);
  swap(a.tasks, b.tasks);
  swap(a.__isset, b.__isset);
}

UpdateResponse::UpdateResponse(const UpdateResponse& other49) {
  ret_status = other49.ret_status;
  tasks = other49.tasks;
  __isset = other49.__isset;
}
UpdateResponse& UpdateResponse::operator=(const UpdateResponse& other50) {
  ret_status = other50.ret_status;
  tasks = other50.tasks;
  __isset = other50.__isset;
  return *this;
}
void UpdateResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateResponse(";
  out << "ret_status=" << to_string(ret_status);
  out << ", " << "tasks=" << to_string(tasks);
  out << ")";
}

} // namespace
