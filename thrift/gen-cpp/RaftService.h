/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RaftService_H
#define RaftService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "raft_service_types.h"

namespace celestial {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RaftServiceIf {
 public:
  virtual ~RaftServiceIf() {}
  virtual void appendEntries(AppendEntriesResponse& _return, const AppendEntriesRequest& request) = 0;
  virtual void installSnapshot(InstallSnapshotResponse& _return, const InstallSnapshotRequest& request) = 0;
  virtual void requestVote(RequestVoteReponse& _return, const RequestVoteRequest& request) = 0;
};

class RaftServiceIfFactory {
 public:
  typedef RaftServiceIf Handler;

  virtual ~RaftServiceIfFactory() {}

  virtual RaftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RaftServiceIf* /* handler */) = 0;
};

class RaftServiceIfSingletonFactory : virtual public RaftServiceIfFactory {
 public:
  RaftServiceIfSingletonFactory(const boost::shared_ptr<RaftServiceIf>& iface) : iface_(iface) {}
  virtual ~RaftServiceIfSingletonFactory() {}

  virtual RaftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RaftServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RaftServiceIf> iface_;
};

class RaftServiceNull : virtual public RaftServiceIf {
 public:
  virtual ~RaftServiceNull() {}
  void appendEntries(AppendEntriesResponse& /* _return */, const AppendEntriesRequest& /* request */) {
    return;
  }
  void installSnapshot(InstallSnapshotResponse& /* _return */, const InstallSnapshotRequest& /* request */) {
    return;
  }
  void requestVote(RequestVoteReponse& /* _return */, const RequestVoteRequest& /* request */) {
    return;
  }
};

typedef struct _RaftService_appendEntries_args__isset {
  _RaftService_appendEntries_args__isset() : request(false) {}
  bool request :1;
} _RaftService_appendEntries_args__isset;

class RaftService_appendEntries_args {
 public:

  RaftService_appendEntries_args(const RaftService_appendEntries_args&);
  RaftService_appendEntries_args& operator=(const RaftService_appendEntries_args&);
  RaftService_appendEntries_args() {
  }

  virtual ~RaftService_appendEntries_args() throw();
  AppendEntriesRequest request;

  _RaftService_appendEntries_args__isset __isset;

  void __set_request(const AppendEntriesRequest& val);

  bool operator == (const RaftService_appendEntries_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const RaftService_appendEntries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftService_appendEntries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaftService_appendEntries_pargs {
 public:


  virtual ~RaftService_appendEntries_pargs() throw();
  const AppendEntriesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaftService_appendEntries_result__isset {
  _RaftService_appendEntries_result__isset() : success(false) {}
  bool success :1;
} _RaftService_appendEntries_result__isset;

class RaftService_appendEntries_result {
 public:

  RaftService_appendEntries_result(const RaftService_appendEntries_result&);
  RaftService_appendEntries_result& operator=(const RaftService_appendEntries_result&);
  RaftService_appendEntries_result() {
  }

  virtual ~RaftService_appendEntries_result() throw();
  AppendEntriesResponse success;

  _RaftService_appendEntries_result__isset __isset;

  void __set_success(const AppendEntriesResponse& val);

  bool operator == (const RaftService_appendEntries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaftService_appendEntries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftService_appendEntries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaftService_appendEntries_presult__isset {
  _RaftService_appendEntries_presult__isset() : success(false) {}
  bool success :1;
} _RaftService_appendEntries_presult__isset;

class RaftService_appendEntries_presult {
 public:


  virtual ~RaftService_appendEntries_presult() throw();
  AppendEntriesResponse* success;

  _RaftService_appendEntries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaftService_installSnapshot_args__isset {
  _RaftService_installSnapshot_args__isset() : request(false) {}
  bool request :1;
} _RaftService_installSnapshot_args__isset;

class RaftService_installSnapshot_args {
 public:

  RaftService_installSnapshot_args(const RaftService_installSnapshot_args&);
  RaftService_installSnapshot_args& operator=(const RaftService_installSnapshot_args&);
  RaftService_installSnapshot_args() {
  }

  virtual ~RaftService_installSnapshot_args() throw();
  InstallSnapshotRequest request;

  _RaftService_installSnapshot_args__isset __isset;

  void __set_request(const InstallSnapshotRequest& val);

  bool operator == (const RaftService_installSnapshot_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const RaftService_installSnapshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftService_installSnapshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaftService_installSnapshot_pargs {
 public:


  virtual ~RaftService_installSnapshot_pargs() throw();
  const InstallSnapshotRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaftService_installSnapshot_result__isset {
  _RaftService_installSnapshot_result__isset() : success(false) {}
  bool success :1;
} _RaftService_installSnapshot_result__isset;

class RaftService_installSnapshot_result {
 public:

  RaftService_installSnapshot_result(const RaftService_installSnapshot_result&);
  RaftService_installSnapshot_result& operator=(const RaftService_installSnapshot_result&);
  RaftService_installSnapshot_result() {
  }

  virtual ~RaftService_installSnapshot_result() throw();
  InstallSnapshotResponse success;

  _RaftService_installSnapshot_result__isset __isset;

  void __set_success(const InstallSnapshotResponse& val);

  bool operator == (const RaftService_installSnapshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaftService_installSnapshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftService_installSnapshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaftService_installSnapshot_presult__isset {
  _RaftService_installSnapshot_presult__isset() : success(false) {}
  bool success :1;
} _RaftService_installSnapshot_presult__isset;

class RaftService_installSnapshot_presult {
 public:


  virtual ~RaftService_installSnapshot_presult() throw();
  InstallSnapshotResponse* success;

  _RaftService_installSnapshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaftService_requestVote_args__isset {
  _RaftService_requestVote_args__isset() : request(false) {}
  bool request :1;
} _RaftService_requestVote_args__isset;

class RaftService_requestVote_args {
 public:

  RaftService_requestVote_args(const RaftService_requestVote_args&);
  RaftService_requestVote_args& operator=(const RaftService_requestVote_args&);
  RaftService_requestVote_args() {
  }

  virtual ~RaftService_requestVote_args() throw();
  RequestVoteRequest request;

  _RaftService_requestVote_args__isset __isset;

  void __set_request(const RequestVoteRequest& val);

  bool operator == (const RaftService_requestVote_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const RaftService_requestVote_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftService_requestVote_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaftService_requestVote_pargs {
 public:


  virtual ~RaftService_requestVote_pargs() throw();
  const RequestVoteRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaftService_requestVote_result__isset {
  _RaftService_requestVote_result__isset() : success(false) {}
  bool success :1;
} _RaftService_requestVote_result__isset;

class RaftService_requestVote_result {
 public:

  RaftService_requestVote_result(const RaftService_requestVote_result&);
  RaftService_requestVote_result& operator=(const RaftService_requestVote_result&);
  RaftService_requestVote_result() {
  }

  virtual ~RaftService_requestVote_result() throw();
  RequestVoteReponse success;

  _RaftService_requestVote_result__isset __isset;

  void __set_success(const RequestVoteReponse& val);

  bool operator == (const RaftService_requestVote_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaftService_requestVote_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftService_requestVote_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaftService_requestVote_presult__isset {
  _RaftService_requestVote_presult__isset() : success(false) {}
  bool success :1;
} _RaftService_requestVote_presult__isset;

class RaftService_requestVote_presult {
 public:


  virtual ~RaftService_requestVote_presult() throw();
  RequestVoteReponse* success;

  _RaftService_requestVote_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RaftServiceClient : virtual public RaftServiceIf {
 public:
  RaftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RaftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void appendEntries(AppendEntriesResponse& _return, const AppendEntriesRequest& request);
  void send_appendEntries(const AppendEntriesRequest& request);
  void recv_appendEntries(AppendEntriesResponse& _return);
  void installSnapshot(InstallSnapshotResponse& _return, const InstallSnapshotRequest& request);
  void send_installSnapshot(const InstallSnapshotRequest& request);
  void recv_installSnapshot(InstallSnapshotResponse& _return);
  void requestVote(RequestVoteReponse& _return, const RequestVoteRequest& request);
  void send_requestVote(const RequestVoteRequest& request);
  void recv_requestVote(RequestVoteReponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RaftServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RaftServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RaftServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_appendEntries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_installSnapshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestVote(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RaftServiceProcessor(boost::shared_ptr<RaftServiceIf> iface) :
    iface_(iface) {
    processMap_["appendEntries"] = &RaftServiceProcessor::process_appendEntries;
    processMap_["installSnapshot"] = &RaftServiceProcessor::process_installSnapshot;
    processMap_["requestVote"] = &RaftServiceProcessor::process_requestVote;
  }

  virtual ~RaftServiceProcessor() {}
};

class RaftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RaftServiceProcessorFactory(const ::boost::shared_ptr< RaftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RaftServiceIfFactory > handlerFactory_;
};

class RaftServiceMultiface : virtual public RaftServiceIf {
 public:
  RaftServiceMultiface(std::vector<boost::shared_ptr<RaftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RaftServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RaftServiceIf> > ifaces_;
  RaftServiceMultiface() {}
  void add(boost::shared_ptr<RaftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void appendEntries(AppendEntriesResponse& _return, const AppendEntriesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->appendEntries(_return, request);
    }
    ifaces_[i]->appendEntries(_return, request);
    return;
  }

  void installSnapshot(InstallSnapshotResponse& _return, const InstallSnapshotRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->installSnapshot(_return, request);
    }
    ifaces_[i]->installSnapshot(_return, request);
    return;
  }

  void requestVote(RequestVoteReponse& _return, const RequestVoteRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestVote(_return, request);
    }
    ifaces_[i]->requestVote(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RaftServiceConcurrentClient : virtual public RaftServiceIf {
 public:
  RaftServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RaftServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void appendEntries(AppendEntriesResponse& _return, const AppendEntriesRequest& request);
  int32_t send_appendEntries(const AppendEntriesRequest& request);
  void recv_appendEntries(AppendEntriesResponse& _return, const int32_t seqid);
  void installSnapshot(InstallSnapshotResponse& _return, const InstallSnapshotRequest& request);
  int32_t send_installSnapshot(const InstallSnapshotRequest& request);
  void recv_installSnapshot(InstallSnapshotResponse& _return, const int32_t seqid);
  void requestVote(RequestVoteReponse& _return, const RequestVoteRequest& request);
  int32_t send_requestVote(const RequestVoteRequest& request);
  void recv_requestVote(RequestVoteReponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
