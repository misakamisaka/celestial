/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef raft_service_TYPES_H
#define raft_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace celestial {

struct EntryType {
  enum type {
    UNKNOWN = 0,
    DATA = 1,
    NOOP = 2
  };
};

extern const std::map<int, const char*> _EntryType_VALUES_TO_NAMES;

class Entry;

class AppendEntriesRequest;

class AppendEntriesResponse;

class InstallSnapshotRequest;

class InstallSnapshotResponse;

class RequestVoteRequest;

class RequestVoteReponse;

typedef struct _Entry__isset {
  _Entry__isset() : term(false), entry_type(false), data(false) {}
  bool term :1;
  bool entry_type :1;
  bool data :1;
} _Entry__isset;

class Entry {
 public:

  Entry(const Entry&);
  Entry& operator=(const Entry&);
  Entry() : term(0), entry_type((EntryType::type)0), data() {
  }

  virtual ~Entry() throw();
  int64_t term;
  EntryType::type entry_type;
  std::string data;

  _Entry__isset __isset;

  void __set_term(const int64_t val);

  void __set_entry_type(const EntryType::type val);

  void __set_data(const std::string& val);

  bool operator == (const Entry & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(entry_type == rhs.entry_type))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Entry &a, Entry &b);

inline std::ostream& operator<<(std::ostream& out, const Entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AppendEntriesRequest__isset {
  _AppendEntriesRequest__isset() : serverid(false), term(false), prev_log_index(false), prev_log_term(false), entries(false), commit_index(false) {}
  bool serverid :1;
  bool term :1;
  bool prev_log_index :1;
  bool prev_log_term :1;
  bool entries :1;
  bool commit_index :1;
} _AppendEntriesRequest__isset;

class AppendEntriesRequest {
 public:

  AppendEntriesRequest(const AppendEntriesRequest&);
  AppendEntriesRequest& operator=(const AppendEntriesRequest&);
  AppendEntriesRequest() : serverid(0), term(0), prev_log_index(0), prev_log_term(0), commit_index(0) {
  }

  virtual ~AppendEntriesRequest() throw();
  int64_t serverid;
  int64_t term;
  int64_t prev_log_index;
  int64_t prev_log_term;
  std::vector<Entry>  entries;
  int64_t commit_index;

  _AppendEntriesRequest__isset __isset;

  void __set_serverid(const int64_t val);

  void __set_term(const int64_t val);

  void __set_prev_log_index(const int64_t val);

  void __set_prev_log_term(const int64_t val);

  void __set_entries(const std::vector<Entry> & val);

  void __set_commit_index(const int64_t val);

  bool operator == (const AppendEntriesRequest & rhs) const
  {
    if (!(serverid == rhs.serverid))
      return false;
    if (!(term == rhs.term))
      return false;
    if (!(prev_log_index == rhs.prev_log_index))
      return false;
    if (!(prev_log_term == rhs.prev_log_term))
      return false;
    if (!(entries == rhs.entries))
      return false;
    if (!(commit_index == rhs.commit_index))
      return false;
    return true;
  }
  bool operator != (const AppendEntriesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendEntriesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendEntriesRequest &a, AppendEntriesRequest &b);

inline std::ostream& operator<<(std::ostream& out, const AppendEntriesRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AppendEntriesResponse__isset {
  _AppendEntriesResponse__isset() : term(false), success(false), last_log_index(false) {}
  bool term :1;
  bool success :1;
  bool last_log_index :1;
} _AppendEntriesResponse__isset;

class AppendEntriesResponse {
 public:

  AppendEntriesResponse(const AppendEntriesResponse&);
  AppendEntriesResponse& operator=(const AppendEntriesResponse&);
  AppendEntriesResponse() : term(0), success(0), last_log_index(0) {
  }

  virtual ~AppendEntriesResponse() throw();
  int64_t term;
  bool success;
  int64_t last_log_index;

  _AppendEntriesResponse__isset __isset;

  void __set_term(const int64_t val);

  void __set_success(const bool val);

  void __set_last_log_index(const int64_t val);

  bool operator == (const AppendEntriesResponse & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(success == rhs.success))
      return false;
    if (__isset.last_log_index != rhs.__isset.last_log_index)
      return false;
    else if (__isset.last_log_index && !(last_log_index == rhs.last_log_index))
      return false;
    return true;
  }
  bool operator != (const AppendEntriesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendEntriesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendEntriesResponse &a, AppendEntriesResponse &b);

inline std::ostream& operator<<(std::ostream& out, const AppendEntriesResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InstallSnapshotRequest__isset {
  _InstallSnapshotRequest__isset() : serverid(false), term(false), last_included_index(false), last_included_term(false), offset(false), data(false), done(false) {}
  bool serverid :1;
  bool term :1;
  bool last_included_index :1;
  bool last_included_term :1;
  bool offset :1;
  bool data :1;
  bool done :1;
} _InstallSnapshotRequest__isset;

class InstallSnapshotRequest {
 public:

  InstallSnapshotRequest(const InstallSnapshotRequest&);
  InstallSnapshotRequest& operator=(const InstallSnapshotRequest&);
  InstallSnapshotRequest() : serverid(0), term(0), last_included_index(0), last_included_term(0), offset(0), data(), done(0) {
  }

  virtual ~InstallSnapshotRequest() throw();
  int64_t serverid;
  int64_t term;
  int64_t last_included_index;
  int64_t last_included_term;
  int64_t offset;
  std::string data;
  bool done;

  _InstallSnapshotRequest__isset __isset;

  void __set_serverid(const int64_t val);

  void __set_term(const int64_t val);

  void __set_last_included_index(const int64_t val);

  void __set_last_included_term(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_data(const std::string& val);

  void __set_done(const bool val);

  bool operator == (const InstallSnapshotRequest & rhs) const
  {
    if (!(serverid == rhs.serverid))
      return false;
    if (!(term == rhs.term))
      return false;
    if (!(last_included_index == rhs.last_included_index))
      return false;
    if (!(last_included_term == rhs.last_included_term))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(done == rhs.done))
      return false;
    return true;
  }
  bool operator != (const InstallSnapshotRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstallSnapshotRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InstallSnapshotRequest &a, InstallSnapshotRequest &b);

inline std::ostream& operator<<(std::ostream& out, const InstallSnapshotRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InstallSnapshotResponse__isset {
  _InstallSnapshotResponse__isset() : term(false), bytes_stored(false) {}
  bool term :1;
  bool bytes_stored :1;
} _InstallSnapshotResponse__isset;

class InstallSnapshotResponse {
 public:

  InstallSnapshotResponse(const InstallSnapshotResponse&);
  InstallSnapshotResponse& operator=(const InstallSnapshotResponse&);
  InstallSnapshotResponse() : term(0), bytes_stored(0) {
  }

  virtual ~InstallSnapshotResponse() throw();
  int64_t term;
  int64_t bytes_stored;

  _InstallSnapshotResponse__isset __isset;

  void __set_term(const int64_t val);

  void __set_bytes_stored(const int64_t val);

  bool operator == (const InstallSnapshotResponse & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(bytes_stored == rhs.bytes_stored))
      return false;
    return true;
  }
  bool operator != (const InstallSnapshotResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstallSnapshotResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InstallSnapshotResponse &a, InstallSnapshotResponse &b);

inline std::ostream& operator<<(std::ostream& out, const InstallSnapshotResponse& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RequestVoteRequest__isset {
  _RequestVoteRequest__isset() : serverid(false), term(false), last_log_index(false), last_log_term(false) {}
  bool serverid :1;
  bool term :1;
  bool last_log_index :1;
  bool last_log_term :1;
} _RequestVoteRequest__isset;

class RequestVoteRequest {
 public:

  RequestVoteRequest(const RequestVoteRequest&);
  RequestVoteRequest& operator=(const RequestVoteRequest&);
  RequestVoteRequest() : serverid(0), term(0), last_log_index(0), last_log_term(0) {
  }

  virtual ~RequestVoteRequest() throw();
  int64_t serverid;
  int64_t term;
  int64_t last_log_index;
  int64_t last_log_term;

  _RequestVoteRequest__isset __isset;

  void __set_serverid(const int64_t val);

  void __set_term(const int64_t val);

  void __set_last_log_index(const int64_t val);

  void __set_last_log_term(const int64_t val);

  bool operator == (const RequestVoteRequest & rhs) const
  {
    if (!(serverid == rhs.serverid))
      return false;
    if (!(term == rhs.term))
      return false;
    if (!(last_log_index == rhs.last_log_index))
      return false;
    if (!(last_log_term == rhs.last_log_term))
      return false;
    return true;
  }
  bool operator != (const RequestVoteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestVoteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestVoteRequest &a, RequestVoteRequest &b);

inline std::ostream& operator<<(std::ostream& out, const RequestVoteRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RequestVoteReponse__isset {
  _RequestVoteReponse__isset() : term(false), granted(false), log_ok(false) {}
  bool term :1;
  bool granted :1;
  bool log_ok :1;
} _RequestVoteReponse__isset;

class RequestVoteReponse {
 public:

  RequestVoteReponse(const RequestVoteReponse&);
  RequestVoteReponse& operator=(const RequestVoteReponse&);
  RequestVoteReponse() : term(0), granted(0), log_ok(0) {
  }

  virtual ~RequestVoteReponse() throw();
  int64_t term;
  bool granted;
  bool log_ok;

  _RequestVoteReponse__isset __isset;

  void __set_term(const int64_t val);

  void __set_granted(const bool val);

  void __set_log_ok(const bool val);

  bool operator == (const RequestVoteReponse & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(granted == rhs.granted))
      return false;
    if (!(log_ok == rhs.log_ok))
      return false;
    return true;
  }
  bool operator != (const RequestVoteReponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestVoteReponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestVoteReponse &a, RequestVoteReponse &b);

inline std::ostream& operator<<(std::ostream& out, const RequestVoteReponse& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
