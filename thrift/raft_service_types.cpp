/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "raft_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace celestial {

int _kEntryTypeValues[] = {
  EntryType::UNKNOWN,
  EntryType::DATA,
  EntryType::NOOP
};
const char* _kEntryTypeNames[] = {
  "UNKNOWN",
  "DATA",
  "NOOP"
};
const std::map<int, const char*> _EntryType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEntryTypeValues, _kEntryTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Entry::~Entry() throw() {
}


void Entry::__set_term(const int64_t val) {
  this->term = val;
}

void Entry::__set_entry_type(const EntryType::type val) {
  this->entry_type = val;
}

void Entry::__set_data(const std::string& val) {
  this->data = val;
}

uint32_t Entry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->entry_type = (EntryType::type)ecast0;
          this->__isset.entry_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Entry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Entry");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entry_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->entry_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Entry &a, Entry &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.entry_type, b.entry_type);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

Entry::Entry(const Entry& other1) {
  term = other1.term;
  entry_type = other1.entry_type;
  data = other1.data;
  __isset = other1.__isset;
}
Entry& Entry::operator=(const Entry& other2) {
  term = other2.term;
  entry_type = other2.entry_type;
  data = other2.data;
  __isset = other2.__isset;
  return *this;
}
void Entry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Entry(";
  out << "term=" << to_string(term);
  out << ", " << "entry_type=" << to_string(entry_type);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


AppendEntriesRequest::~AppendEntriesRequest() throw() {
}


void AppendEntriesRequest::__set_serverid(const int64_t val) {
  this->serverid = val;
}

void AppendEntriesRequest::__set_term(const int64_t val) {
  this->term = val;
}

void AppendEntriesRequest::__set_prev_log_index(const int64_t val) {
  this->prev_log_index = val;
}

void AppendEntriesRequest::__set_prev_log_term(const int64_t val) {
  this->prev_log_term = val;
}

void AppendEntriesRequest::__set_entries(const std::vector<Entry> & val) {
  this->entries = val;
}

void AppendEntriesRequest::__set_commit_index(const int64_t val) {
  this->commit_index = val;
}

uint32_t AppendEntriesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serverid);
          this->__isset.serverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prev_log_index);
          this->__isset.prev_log_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->prev_log_term);
          this->__isset.prev_log_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entries.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->entries.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->entries[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commit_index);
          this->__isset.commit_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AppendEntriesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AppendEntriesRequest");

  xfer += oprot->writeFieldBegin("serverid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->serverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prev_log_index", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->prev_log_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prev_log_term", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->prev_log_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entries", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entries.size()));
    std::vector<Entry> ::const_iterator _iter8;
    for (_iter8 = this->entries.begin(); _iter8 != this->entries.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commit_index", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->commit_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AppendEntriesRequest &a, AppendEntriesRequest &b) {
  using ::std::swap;
  swap(a.serverid, b.serverid);
  swap(a.term, b.term);
  swap(a.prev_log_index, b.prev_log_index);
  swap(a.prev_log_term, b.prev_log_term);
  swap(a.entries, b.entries);
  swap(a.commit_index, b.commit_index);
  swap(a.__isset, b.__isset);
}

AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& other9) {
  serverid = other9.serverid;
  term = other9.term;
  prev_log_index = other9.prev_log_index;
  prev_log_term = other9.prev_log_term;
  entries = other9.entries;
  commit_index = other9.commit_index;
  __isset = other9.__isset;
}
AppendEntriesRequest& AppendEntriesRequest::operator=(const AppendEntriesRequest& other10) {
  serverid = other10.serverid;
  term = other10.term;
  prev_log_index = other10.prev_log_index;
  prev_log_term = other10.prev_log_term;
  entries = other10.entries;
  commit_index = other10.commit_index;
  __isset = other10.__isset;
  return *this;
}
void AppendEntriesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AppendEntriesRequest(";
  out << "serverid=" << to_string(serverid);
  out << ", " << "term=" << to_string(term);
  out << ", " << "prev_log_index=" << to_string(prev_log_index);
  out << ", " << "prev_log_term=" << to_string(prev_log_term);
  out << ", " << "entries=" << to_string(entries);
  out << ", " << "commit_index=" << to_string(commit_index);
  out << ")";
}


AppendEntriesResponse::~AppendEntriesResponse() throw() {
}


void AppendEntriesResponse::__set_term(const int64_t val) {
  this->term = val;
}

void AppendEntriesResponse::__set_success(const bool val) {
  this->success = val;
}

void AppendEntriesResponse::__set_last_log_index(const int64_t val) {
  this->last_log_index = val;
__isset.last_log_index = true;
}

uint32_t AppendEntriesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_log_index);
          this->__isset.last_log_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AppendEntriesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AppendEntriesResponse");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.last_log_index) {
    xfer += oprot->writeFieldBegin("last_log_index", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->last_log_index);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AppendEntriesResponse &a, AppendEntriesResponse &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.success, b.success);
  swap(a.last_log_index, b.last_log_index);
  swap(a.__isset, b.__isset);
}

AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& other11) {
  term = other11.term;
  success = other11.success;
  last_log_index = other11.last_log_index;
  __isset = other11.__isset;
}
AppendEntriesResponse& AppendEntriesResponse::operator=(const AppendEntriesResponse& other12) {
  term = other12.term;
  success = other12.success;
  last_log_index = other12.last_log_index;
  __isset = other12.__isset;
  return *this;
}
void AppendEntriesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AppendEntriesResponse(";
  out << "term=" << to_string(term);
  out << ", " << "success=" << to_string(success);
  out << ", " << "last_log_index="; (__isset.last_log_index ? (out << to_string(last_log_index)) : (out << "<null>"));
  out << ")";
}


InstallSnapshotRequest::~InstallSnapshotRequest() throw() {
}


void InstallSnapshotRequest::__set_serverid(const int64_t val) {
  this->serverid = val;
}

void InstallSnapshotRequest::__set_term(const int64_t val) {
  this->term = val;
}

void InstallSnapshotRequest::__set_last_included_index(const int64_t val) {
  this->last_included_index = val;
}

void InstallSnapshotRequest::__set_last_included_term(const int64_t val) {
  this->last_included_term = val;
}

void InstallSnapshotRequest::__set_offset(const int64_t val) {
  this->offset = val;
}

void InstallSnapshotRequest::__set_data(const std::string& val) {
  this->data = val;
}

void InstallSnapshotRequest::__set_done(const bool val) {
  this->done = val;
}

uint32_t InstallSnapshotRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serverid);
          this->__isset.serverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_included_index);
          this->__isset.last_included_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_included_term);
          this->__isset.last_included_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->done);
          this->__isset.done = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InstallSnapshotRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InstallSnapshotRequest");

  xfer += oprot->writeFieldBegin("serverid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->serverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_included_index", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->last_included_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_included_term", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->last_included_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("done", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->done);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InstallSnapshotRequest &a, InstallSnapshotRequest &b) {
  using ::std::swap;
  swap(a.serverid, b.serverid);
  swap(a.term, b.term);
  swap(a.last_included_index, b.last_included_index);
  swap(a.last_included_term, b.last_included_term);
  swap(a.offset, b.offset);
  swap(a.data, b.data);
  swap(a.done, b.done);
  swap(a.__isset, b.__isset);
}

InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& other13) {
  serverid = other13.serverid;
  term = other13.term;
  last_included_index = other13.last_included_index;
  last_included_term = other13.last_included_term;
  offset = other13.offset;
  data = other13.data;
  done = other13.done;
  __isset = other13.__isset;
}
InstallSnapshotRequest& InstallSnapshotRequest::operator=(const InstallSnapshotRequest& other14) {
  serverid = other14.serverid;
  term = other14.term;
  last_included_index = other14.last_included_index;
  last_included_term = other14.last_included_term;
  offset = other14.offset;
  data = other14.data;
  done = other14.done;
  __isset = other14.__isset;
  return *this;
}
void InstallSnapshotRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InstallSnapshotRequest(";
  out << "serverid=" << to_string(serverid);
  out << ", " << "term=" << to_string(term);
  out << ", " << "last_included_index=" << to_string(last_included_index);
  out << ", " << "last_included_term=" << to_string(last_included_term);
  out << ", " << "offset=" << to_string(offset);
  out << ", " << "data=" << to_string(data);
  out << ", " << "done=" << to_string(done);
  out << ")";
}


InstallSnapshotResponse::~InstallSnapshotResponse() throw() {
}


void InstallSnapshotResponse::__set_term(const int64_t val) {
  this->term = val;
}

void InstallSnapshotResponse::__set_bytes_stored(const int64_t val) {
  this->bytes_stored = val;
}

uint32_t InstallSnapshotResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytes_stored);
          this->__isset.bytes_stored = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InstallSnapshotResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InstallSnapshotResponse");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bytes_stored", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bytes_stored);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InstallSnapshotResponse &a, InstallSnapshotResponse &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.bytes_stored, b.bytes_stored);
  swap(a.__isset, b.__isset);
}

InstallSnapshotResponse::InstallSnapshotResponse(const InstallSnapshotResponse& other15) {
  term = other15.term;
  bytes_stored = other15.bytes_stored;
  __isset = other15.__isset;
}
InstallSnapshotResponse& InstallSnapshotResponse::operator=(const InstallSnapshotResponse& other16) {
  term = other16.term;
  bytes_stored = other16.bytes_stored;
  __isset = other16.__isset;
  return *this;
}
void InstallSnapshotResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InstallSnapshotResponse(";
  out << "term=" << to_string(term);
  out << ", " << "bytes_stored=" << to_string(bytes_stored);
  out << ")";
}


RequestVoteRequest::~RequestVoteRequest() throw() {
}


void RequestVoteRequest::__set_serverid(const int64_t val) {
  this->serverid = val;
}

void RequestVoteRequest::__set_term(const int64_t val) {
  this->term = val;
}

void RequestVoteRequest::__set_last_log_index(const int64_t val) {
  this->last_log_index = val;
}

void RequestVoteRequest::__set_last_log_term(const int64_t val) {
  this->last_log_term = val;
}

uint32_t RequestVoteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serverid);
          this->__isset.serverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_log_index);
          this->__isset.last_log_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_log_term);
          this->__isset.last_log_term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestVoteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestVoteRequest");

  xfer += oprot->writeFieldBegin("serverid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->serverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_log_index", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->last_log_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_log_term", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->last_log_term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestVoteRequest &a, RequestVoteRequest &b) {
  using ::std::swap;
  swap(a.serverid, b.serverid);
  swap(a.term, b.term);
  swap(a.last_log_index, b.last_log_index);
  swap(a.last_log_term, b.last_log_term);
  swap(a.__isset, b.__isset);
}

RequestVoteRequest::RequestVoteRequest(const RequestVoteRequest& other17) {
  serverid = other17.serverid;
  term = other17.term;
  last_log_index = other17.last_log_index;
  last_log_term = other17.last_log_term;
  __isset = other17.__isset;
}
RequestVoteRequest& RequestVoteRequest::operator=(const RequestVoteRequest& other18) {
  serverid = other18.serverid;
  term = other18.term;
  last_log_index = other18.last_log_index;
  last_log_term = other18.last_log_term;
  __isset = other18.__isset;
  return *this;
}
void RequestVoteRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestVoteRequest(";
  out << "serverid=" << to_string(serverid);
  out << ", " << "term=" << to_string(term);
  out << ", " << "last_log_index=" << to_string(last_log_index);
  out << ", " << "last_log_term=" << to_string(last_log_term);
  out << ")";
}


RequestVoteReponse::~RequestVoteReponse() throw() {
}


void RequestVoteReponse::__set_term(const int64_t val) {
  this->term = val;
}

void RequestVoteReponse::__set_granted(const bool val) {
  this->granted = val;
}

void RequestVoteReponse::__set_log_ok(const bool val) {
  this->log_ok = val;
}

uint32_t RequestVoteReponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->term);
          this->__isset.term = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->granted);
          this->__isset.granted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->log_ok);
          this->__isset.log_ok = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestVoteReponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestVoteReponse");

  xfer += oprot->writeFieldBegin("term", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->term);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("granted", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->granted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_ok", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->log_ok);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestVoteReponse &a, RequestVoteReponse &b) {
  using ::std::swap;
  swap(a.term, b.term);
  swap(a.granted, b.granted);
  swap(a.log_ok, b.log_ok);
  swap(a.__isset, b.__isset);
}

RequestVoteReponse::RequestVoteReponse(const RequestVoteReponse& other19) {
  term = other19.term;
  granted = other19.granted;
  log_ok = other19.log_ok;
  __isset = other19.__isset;
}
RequestVoteReponse& RequestVoteReponse::operator=(const RequestVoteReponse& other20) {
  term = other20.term;
  granted = other20.granted;
  log_ok = other20.log_ok;
  __isset = other20.__isset;
  return *this;
}
void RequestVoteReponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestVoteReponse(";
  out << "term=" << to_string(term);
  out << ", " << "granted=" << to_string(granted);
  out << ", " << "log_ok=" << to_string(log_ok);
  out << ")";
}

} // namespace
